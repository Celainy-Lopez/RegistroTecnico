@page "/TiposTecnicos/EditTipoTecnico/{TipoTecnicoId:int}"
@rendermode InteractiveServer
@inject TipoTecnicoService tipoTecnicoService
@inject NavigationManager navigation

<PageTitle>Editar tipo t&eacute;cnico</PageTitle>
<EditForm Model="TipoTecnico" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-danger text-white text-center">
				<h2 class="bi bi-pencil-square"><strong>Editar tipo t&eacute;cnico</strong></h2>
			</div>

			<div class="card-body">
				@*Id*@
				<label for="id" class="form-label"><strong>ID</strong></label>
				<InputNumber id="id" class="form-control" @bind-Value="TipoTecnico.TipoTecnicoId" readonly></InputNumber>

				@*Descripcion*@
				<label for="Descripcion" class="form-label"><strong>Descripcion</strong></label>
				<InputText id="Descripcion" class="form-control" @bind-Value="TipoTecnico.Descripcion" @onfocus="LimpiarMensaje"></InputText>
				<ValidationMessage For="@(()=> TipoTecnico.Descripcion)"></ValidationMessage>
				@if (!string.IsNullOrEmpty(ErrorMessage))
				{
					<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

				}

			</div>
			<div class="card-footer">
				@if (!string.IsNullOrEmpty(CheckMessage))
				{
					<div class="alert alert-success bi bi-check2-circle ">@CheckMessage</div>
				}
				@if (!string.IsNullOrEmpty(WarningMessage))
				{
					<div class="alert alert-warning bi bi-exclamation-triangle "> @WarningMessage</div>
				}
				<a href="/TiposTecnicos/IndexTipoTecnico"
					 class="btn btn-outline-secondary">
					<span class="bi bi-arrow-left mt-3"></span> Volver
				</a> 
				<button type="submit" class="btn btn-outline-success bi bi-pencil-square"> Modificar</button>
			</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int TipoTecnicoId { get; set; }
	public TiposTecnicos TipoTecnico { get; set; } = new TiposTecnicos();
	public string ErrorMessage { get; set; }
	public string CheckMessage{ get; set; }
	public string WarningMessage{ get; set; }


	protected override async Task OnInitializedAsync()
	{
		if (TipoTecnicoId > 0)
		{
			TipoTecnico = await tipoTecnicoService.Buscar(TipoTecnicoId);
		}

	}

	public async Task Modificar()
	{
		var tipoTecnicoOriginal = await tipoTecnicoService.Buscar(TipoTecnicoId);
		if (TipoTecnico.Descripcion != tipoTecnicoOriginal.Descripcion && await tipoTecnicoService.ValidarTipoTecnico(TipoTecnico.Descripcion))
		{
			ErrorMessage = "Descripción registrada. Ingrese una distinta.";
		}
		else if (TipoTecnico.Descripcion == tipoTecnicoOriginal.Descripcion)
		{
			WarningMessage = "No ha realizado ninguna modificación";
		}
		else
		{
			await tipoTecnicoService.Guardar(TipoTecnico);
			CheckMessage = "El tipo técnico se ha modificado correctamente";
		}
	}

	public void LimpiarMensaje()
	{
		CheckMessage = string.Empty;
		WarningMessage = string.Empty;
		ErrorMessage = string.Empty;
	}
}