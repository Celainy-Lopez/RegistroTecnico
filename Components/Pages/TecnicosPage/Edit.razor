@page "/Tecnicos/Edit/{TecnicoId:int}"
@rendermode InteractiveServer
@inject TipoTecnicoService tipoTecnicoService
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<PageTitle>Editar t&eacute;cnico</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-danger text-white text-center">
				<h2><strong>Editar datos t&eacute;cnico <i class="bi bi-pencil-square" /></strong></h2>
			</div>

			<div class="card-body">
				@*Id*@
				<label for="id" class="form-label"><strong>ID</strong></label>
				<InputNumber id="id" class="form-control" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>

				@*NombreTecnico*@
				<label for="NombreTecnico" class="form-label"><strong>Nombre</strong></label>
				<InputText id="NombreTecnico" class="form-control" @bind-Value="Tecnico.NombreTecnico" @onfocus="() => ErrorMessage = string.Empty"></InputText>
				<ValidationMessage For="@(()=> Tecnico.NombreTecnico)"></ValidationMessage>
				@if (!string.IsNullOrEmpty(ErrorMessage))
				{
					<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

				}

				<label for="Descripcion" class="form-label"><strong>Descripcion tipo t&eacute;cnico</strong></label>
				<!--Filtrar modificacion del tipo tecnico-->
				<InputSelect id="Descripcion" class="form-select" @bind-Value="Tecnico.TipoTecnicoId">
					<option value="0">Seleccione un tipo de técnico</option>
					@foreach (var descripcion in ListaDescripciones)
					{
						<option value="@descripcion.TipoTecnicoId">@descripcion.Descripcion</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=> Tecnico.TipoTecnicoId)"></ValidationMessage>


				@*SueldoHora*@
				<label for="SueldoHora" class="form-label"><strong>SueldoHora</strong></label>
				<InputNumber id="SueldoHora" class="form-control" @bind-Value="Tecnico.SueldoHora"></InputNumber>
				<ValidationMessage For="@(()=> Tecnico.SueldoHora)"></ValidationMessage>
			</div>
			<div class="card-footer">
				<a href="/Tecnicos/Index"
				   class="btn btn-outline-secondary">
					<span class="bi bi-arrow-left mt-3"></span> Volver
				</a>   
				<button type="submit" class="btn btn-outline-success bi bi-pencil-square"> Modificar</button>
			</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int TecnicoId { get; set; }
	public Tecnicos Tecnico { get; set; } = new Tecnicos();
	public bool Repetido { get; set; }
	public string ErrorMessage { get; set; }
	public List<TiposTecnicos> ListaDescripciones{ get; set; } = new List<TiposTecnicos>();


	protected override async Task OnInitializedAsync()
	{
		if (TecnicoId > 0)
		{
			Tecnico = await tecnicoService.Buscar(TecnicoId);
		}
		ListaDescripciones = await tipoTecnicoService.Listar(tT => tT.TipoTecnicoId > 0);

	}

	public async Task Modificar()
	{
		var tecnicoOriginal = await tecnicoService.Buscar(TecnicoId);

		if (Tecnico.NombreTecnico != tecnicoOriginal.NombreTecnico && await tecnicoService.ValidarTecnico(Tecnico.NombreTecnico))
		{
			ErrorMessage = "El nombre del técnico ya existe. Por favor, elija otro.";
		}
		else
		{
			await tecnicoService.Guardar(Tecnico);
			Tecnico = new Tecnicos();
			navigation.NavigateTo("/Tecnicos/Index");
		}
	}

	private void LimpiarError()
	{
		ErrorMessage = string.Empty;
	}
}