@page "/Tecnicos/Delete/{TecnicoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<PageTitle>Eliminar técnico</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="EliminarTecnico">
	<DataAnnotationsValidator />
	<div class="card-shadow-lg">
		<div class="card-header bg-danger text-white text-center">
			<h2>Eliminar técnico</h2>
		</div>
		<div class="card-body">
			<h6><strong>¿Seguro que deseas eliminar este técnico?</strong></h6>
			@*Id*@
			<p class="mb-0">Tecnico Id: @Tecnico.TecnicoId</p>
			<div class="mb-1">
				@*NombreTecnico*@
				<p class="mb-0">Nombre Tecnico: @Tecnico.NombreTecnico</p>
				<div class="mb-1">
					@*SueldoHora*@
					<p class="mb-0"> Sueldo por hora: @Tecnico.SueldoHora</p>
					<div class="mb-1">
					</div>
				</div>

				<div class="card-footer">
					<button type="button" class="btn btn-secondary text-white bi bi-box-arrow-in-left" @onclick=Volver> </button>
					<button type="button" class="btn btn-danger bi bi-trash" @onclick=EliminarTecnico> </button>
				</div>
			</div>
		</div>
	</div>
</EditForm>



@code {

	[Parameter]
	public int TecnicoId { get; set; }
	public Tecnicos Tecnico { get; set; } = new Tecnicos();

	protected override async Task OnInitializedAsync()
	{
		if (TecnicoId > 0)
		{
			Tecnico = (await tecnicoService.Buscar(TecnicoId));
		}

	}

	public async Task EliminarTecnico()
	{
		var eliminar = await tecnicoService.Eliminar(Tecnico.TecnicoId);

		if (eliminar)
		{
			Volver();
		}

	}

	public void Volver()
	{
		navigation.NavigateTo("/Tecnicos/Index");
	}
}