@page "/Tecnicos/Create"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject TipoTecnicoService tipoTecnicoService
@inject NavigationManager navigation
@inject IJSRuntime js

<PageTitle> Nuevo T&eacute;cnico</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container"></div>
    <div class="card shadow-lg">
        <div class="card-header bg-danger text-white text-center bi bi-person-add fs-1">
            <h2>Agregar t&eacute;cnico</h2>
        </div>
        <div class="card-body">
            @*Id*@
            <label for="id" class="form-label">ID</label>
            <InputNumber id="id" class="form-control" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>

            @*Nombre*@
            <label for="nombre" class="form-label">Nombre t&eacute;cnico</label>
            <InputText id="nombre" class="form-control" @bind-Value="Tecnico.NombreTecnico" placeholder="Juan Perez" @onfocus="() => ErrorMessage = string.Empty"></InputText>
            <ValidationMessage For="@(() => Tecnico.NombreTecnico)"></ValidationMessage>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

            }

            @*Descripcion*@
            <label for="Descripcion" class="form-label"><strong>Descripcion</strong></label>
            <!--Filtrar creacion del tipo tecnico-->
            <InputSelect id="Descripcion" class="form-select" @bind-Value="Tecnico.Descripcion">
                <option value="">Elija una opción</option>
                @foreach (var descripcion in ListaDescripciones)
                {
                    <option value="@descripcion.Descripcion">@descripcion.Descripcion</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=> Tecnico.Descripcion)"></ValidationMessage>

            @*SueldoHora*@
            <label for="sueldoHora" class="form-label">Sueldo Hora</label>
            <InputNumber id="sueldoHora" class="form-control" @bind-Value="Tecnico.SueldoHora" placeholder="0" />
            <ValidationMessage For="@(() => Tecnico.SueldoHora)"></ValidationMessage>

        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-secondary bi bi-box-arrow-in-left" @onclick="Volver"> </button>
            <button type="submit" class="btn btn-danger bi bi-person-fill-down"></button>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    public string ErrorMessage { get; set; }
    public List<TiposTecnicos> ListaDescripciones { get; set; } = new List<TiposTecnicos>();

    protected override async Task OnInitializedAsync()
    {
        ListaDescripciones = await tipoTecnicoService.Listar(tT => tT.TipoTecnicoId > 0);
    }

    public async Task Crear()
    {
        if (await tecnicoService.ValidarTecnico(Tecnico.NombreTecnico))
        {
            ErrorMessage = "El nombre del técnico ya existe. Por favor, elija otro.";
        }
        else
        {
            await tecnicoService.Guardar(Tecnico);
            Tecnico = new Tecnicos();
            navigation.NavigateTo("/Tecnicos/Index");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Tecnicos/Index");
    }
}
