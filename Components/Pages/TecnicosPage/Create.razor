@page "/Tecnicos/Create"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject TipoTecnicoService tipoTecnicoService
@inject NavigationManager navigation
@inject IJSRuntime js

<PageTitle> Nuevo T&eacute;cnico</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white text-center bi bi-person-add fs-1">
                <h2><strong>Agregar t&eacute;cnico</strong></h2>
            </div>
            <div class="card-body">
                @*TecnicoId*@
                <label for="id" class="form-label"><strong>ID</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>

                @*NombreTecnico*@
                <label for="nombre" class="form-label"><strong>Nombre t&eacute;cnico</strong></label>
                <InputText id="nombre" class="form-control" @bind-Value="Tecnico.NombreTecnico" placeholder="Juan Perez" @onfocus="() => ErrorMessage = string.Empty"></InputText>
                <ValidationMessage For="@(() => Tecnico.NombreTecnico)"></ValidationMessage>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

                }

                @*DescripcionTipoTecnico*@
                <label for="Descripcion" class="form-label"><strong>Descripcion</strong></label>
                <!--Filtrar creacion del tipo tecnico-->
                <InputSelect id="Descripcion" class="form-select" @bind-Value="Tecnico.TipoTecnicoId">
                    <option value="0">Elija una opción</option>
                    @foreach (var descripcion in ListaDescripciones)
                    {
                        <option value="@descripcion.TipoTecnicoId">@descripcion.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=> Tecnico.TipoTecnicoId)"></ValidationMessage>

                @*SueldoHora*@
                <label for="sueldoHora" class="form-label"><strong>Sueldo Hora</strong></label>
                <InputNumber id="sueldoHora" class="form-control" @bind-Value="Tecnico.SueldoHora" placeholder="$0.00" />
                <ValidationMessage For="@(() => Tecnico.SueldoHora)"></ValidationMessage>

            </div>
            <div class="card-footer">
                <a href="/Tecnicos/Index"
                   class="btn btn-outline-secondary">
                    <span class="bi bi-arrow-left mt-3"></span> Volver
                </a>
                <button type="submit" class="btn btn-outline-success bi bi-person-down"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    public string ErrorMessage { get; set; }
    public List<TiposTecnicos> ListaDescripciones { get; set; } = new List<TiposTecnicos>();

    protected override async Task OnInitializedAsync()
    {
        ListaDescripciones = await tipoTecnicoService.Listar(tT => tT.TipoTecnicoId > 0);
    }

    public async Task Crear()
    {
        if (await tecnicoService.ValidarTecnico(Tecnico.NombreTecnico))
        {
            ErrorMessage = "El nombre del técnico ya existe. Por favor, elija otro.";
        }
        else
        {
            await tecnicoService.Guardar(Tecnico);
            Tecnico = new Tecnicos();
            navigation.NavigateTo("/Tecnicos/Index");
        }
    }
}
