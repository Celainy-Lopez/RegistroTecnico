@page "/Clientes/EditCliente/{ClienteId:int}"
@rendermode InteractiveServer
@inject ClienteService clienteService
@inject NavigationManager navigation

<PageTitle>Editar cliente</PageTitle>
<EditForm Model="Cliente" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-danger text-white text-center">
				<h2><strong>Editar cliente <i class="bi bi-pencil-square" /></strong></h2>
			</div>

			<div class="card-body">
				@*ClienteId*@
				<label for="id" class="form-label"><strong>ID</strong></label>
				<InputNumber id="id" class="form-control" @bind-Value="Cliente.ClienteId" readonly></InputNumber>

				@*NombreCliente*@
				<label for="nombreCliente" class="form-label"><strong>Nombre Cliente</strong></label>
				<InputText id="nombreCliente" class="form-control" @bind-Value="Cliente.Nombres" @onfocus="() => ErrorMessageName = string.Empty"></InputText>
				<ValidationMessage For="@(()=> Cliente.Nombres)"></ValidationMessage>
				@if (!string.IsNullOrEmpty(ErrorMessageName))
				{
					<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessageName</div>

				}

				@*WhatsApp*@
				<label for="WhatsApp" class="form-label"><strong>WhatsApp</strong></label>
				<InputText id="WhatsApp" class="form-control" @bind-Value="Cliente.WhatsApp" @onfocus="() => ErrorMessageWhatsApp = string.Empty"></InputText>
				<ValidationMessage For="@(()=> Cliente.WhatsApp)"></ValidationMessage>
				@if (!string.IsNullOrEmpty(ErrorMessageWhatsApp))
				{
					<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessageWhatsApp</div>

				}

			</div>
			<div class="card-footer">
				<a href="/Clientes/IndexCliente"
				   class="btn btn-outline-secondary">
					<span class="bi bi-arrow-left mt-3"></span> Volver
				</a>   
				<button type="submit" class="btn btn-danger bi bi-pencil-square"> </button>
			</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int ClienteId { get; set; }
	public Clientes Cliente { get; set; } = new Clientes();
	public bool Repetido { get; set; }
	public string ErrorMessageName { get; set; }
	public string ErrorMessageWhatsApp{ get; set; }


	protected override async Task OnInitializedAsync()
	{
		if (ClienteId > 0)
		{
			Cliente = await clienteService.Buscar(ClienteId);
		}

	}

	public async Task Modificar()
	{
		var clienteOriginal = await clienteService.Buscar(ClienteId);

		if (Cliente.Nombres != clienteOriginal.Nombres && await clienteService.ValidarCliente(Cliente.Nombres))
		{
			ErrorMessageName = "El nombre del técnico ya existe. Por favor, elija otro.";
		}
		else if (await clienteService.ValidarWhatsApp(Cliente.WhatsApp))
		{
			ErrorMessageWhatsApp = "Numero registrado, intenta de nuevo";
		}
		else
		{
			await clienteService.Guardar(Cliente);
			Cliente = new Clientes();
			navigation.NavigateTo("/Clientes/IndexCliente");
		}
		
	}
}