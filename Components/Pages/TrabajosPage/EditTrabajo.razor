@page "/Trabajos/EditTrabajo/{TrabajoId:int}"
@rendermode InteractiveServer
@inject TrabajoService trabajoService
@inject ClienteService clienteService
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<PageTitle>Editar trabajo</PageTitle>
<EditForm Model="Trabajo" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-danger text-white text-center">
				<h2><strong>Editar datos trabajo <i class="bi bi-pencil-square" /></strong></h2>
			</div>

			<div class="card-body">
				@*TrabajoId*@
				<label for="idTrabajo" class="form-label"><strong>Trabajo ID</strong></label>
				<InputNumber id="idTrabajo" class="form-control" @bind-Value="Trabajo.TrabajoId" readonly></InputNumber>

				@*NombreCliente*@
				<label for="nombre" class="form-label"><strong>Nombre Cliente</strong></label>
				<InputSelect id="Nombres" class="form-select" @bind-Value="Trabajo.ClienteId">
					<option value="0">Elija una opción</option>
					@foreach (var nombresC in ListaNombresC)
					{
						<option value="@nombresC.ClienteId">@nombresC.Nombres</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=> Trabajo.ClienteId)"></ValidationMessage>


				@*NombreTecnico*@
				<label for="NombreTecnico" class="form-label"><strong>Nombre t&eacute;cnico</strong></label>
				<InputSelect id="NombreTecnico" class="form-select" @bind-Value="Trabajo.TecnicoId">
					<option value="0">Elija una opción</option>
					@foreach (var nombresT in ListaNombresT)
					{
						<option value="@nombresT.TecnicoId">@nombresT.NombreTecnico (@nombresT.TipoTecnico?.Descripcion)</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=> Trabajo.TecnicoId)"></ValidationMessage>


				@*DescripcionTrabajo*@
				<label for="DescripcionTrabajo" class="form-label"><strong>Descripci&oacute;n trabajo</strong></label>
				<InputText id="DescripcionTrabajo" class="form-control" @bind-Value="Trabajo.DescripcionTrabajo" @onfocus="() => ErrorMessage = string.Empty"></InputText>
				<ValidationMessage For="@(()=> Trabajo.DescripcionTrabajo)"></ValidationMessage>
				@if (!string.IsNullOrEmpty(ErrorMessage))
				{
					<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

				}

				@*Monto*@
				<label for="Monto" class="form-label"><strong>Monto</strong></label>
				<InputNumber id="Monto" class="form-control" @bind-Value="Trabajo.Monto"></InputNumber>
				<ValidationMessage For="@(()=> Trabajo.Monto)"></ValidationMessage>
			</div>
			<div class="card-footer">
				<button type="button" class="btn btn-secondary bi bi-box-arrow-in-left" @onclick="Volver"> </button>
				<button type="submit" class="btn btn-danger bi bi-pencil-square"> </button>
			</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int TrabajoId { get; set; }
	public Trabajos Trabajo { get; set; } = new Trabajos();
	public bool Repetido { get; set; }
	public string ErrorMessage { get; set; }
	public List<Clientes> ListaNombresC{ get; set; } = new List<Clientes>();
	public List<Tecnicos> ListaNombresT { get; set; } = new List<Tecnicos>();


	protected override async Task OnInitializedAsync()
	{
		if (TrabajoId > 0)
		{
			Trabajo = await trabajoService.Buscar(TrabajoId);
		}
		ListaNombresC = await clienteService.Listar(nC => nC.ClienteId > 0);
		ListaNombresT = await tecnicoService.Listar(nT => nT.TecnicoId > 0);

	}

	public async Task Modificar()
	{
		var trabajoOriginal = await trabajoService.Buscar(TrabajoId);
		
		if (Trabajo.DescripcionTrabajo != trabajoOriginal.DescripcionTrabajo && await trabajoService.ValidarTrabajo(Trabajo.DescripcionTrabajo))
		{
			ErrorMessage = "Trabajo registrado. Por favor, elija otro.";
		}
		else
		{
			await trabajoService.Guardar(Trabajo);
			Trabajo = new Trabajos();
			Volver();
		}
	}


	public void Volver()
	{
		navigation.NavigateTo("/Trabajos/IndexTrabajo");
	}

	private void LimpiarError()
	{
		ErrorMessage = string.Empty;
	}
}