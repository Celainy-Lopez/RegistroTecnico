@page "/Trabajos/EditTrabajo/{TrabajoId:int}"
@rendermode InteractiveServer
@inject TrabajoService trabajoService
@inject ClienteService clienteService
@inject TecnicoService tecnicoService
@inject PrioridadService prioridadService
@inject ArticuloService articuloService
@inject NavigationManager navigation

<PageTitle>Editar trabajo</PageTitle>
<EditForm Model="Trabajo" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-danger text-white text-center">
				<h2><strong>Editar datos trabajo <i class="bi bi-pencil-square" /></strong></h2>
			</div>

			<div class="card-body">
				@*TrabajoId*@
				<label for="idTrabajo" class="form-label"><strong>Trabajo ID</strong></label>
				<InputNumber id="idTrabajo" class="form-control" @bind-Value="Trabajo.TrabajoId" readonly></InputNumber>

				@*NombreCliente*@
				<label for="Nombres" class="form-label"><strong>Nombre Cliente</strong></label>
				<InputSelect id="Nombres" class="form-select" @bind-Value="Trabajo.ClienteId" @onfocus="LimpiarMensaje">
					<option value="0">Elija una opción</option>
					@foreach (var nombresC in ListaNombresC)
					{
						<option value="@nombresC.ClienteId">@nombresC.Nombres</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=> Trabajo.ClienteId)"></ValidationMessage>


				@*NombreTecnico*@
				<label for="NombreTecnico" class="form-label"><strong>Nombre t&eacute;cnico</strong></label>
				<InputSelect id="NombreTecnico" class="form-select" @bind-Value="Trabajo.TecnicoId" @onfocus="LimpiarMensaje">
					<option value="0">Elija una opción</option>
					@foreach (var nombresT in ListaNombresT)
					{
						<option value="@nombresT.TecnicoId">@nombresT.NombreTecnico (@nombresT.TipoTecnico?.Descripcion)</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=> Trabajo.TecnicoId)"></ValidationMessage>


				@*DescripcionTrabajo*@
				<label for="DescripcionTrabajo" class="form-label"><strong>Descripci&oacute;n trabajo</strong></label>
				<InputText id="DescripcionTrabajo" class="form-control" @bind-Value="Trabajo.DescripcionTrabajo" @onfocus="LimpiarError"></InputText>
				<ValidationMessage For="@(()=> Trabajo.DescripcionTrabajo)"></ValidationMessage>
				@if (!string.IsNullOrEmpty(ErrorMessage))
				{
					<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

				}

				@*PrioridadTrabajo*@
				<label for="prioridad" class="form-label"><strong>Prioridad</strong></label>
				<InputSelect id="prioridad" class="form-select" @bind-Value="Trabajo.PrioridadId" @onfocus="LimpiarMensaje">
					<option value="0">Elija una opción</option>
					@foreach (var prioridadT in ListaPrioridades)
					{
						<option value="@prioridadT.PrioridadId">@prioridadT.DescripcionPrioridad</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=> Trabajo.PrioridadId)"></ValidationMessage>

				@*Monto*@
				<label for="Monto" class="form-label"><strong>Monto</strong></label>
				<InputNumber id="Monto" class="form-control" @bind-Value="Trabajo.Monto" @onfocus="LimpiarMensaje"></InputNumber>
				<ValidationMessage For="@(()=> Trabajo.Monto)"></ValidationMessage>
			</div>

			@*DetallesArticulosUtilizados*@
			<div class="border border-success p-3 mt-3">
				<h5>Detalles articulos utilizados</h5>
				<div class="row">
					<div class="col input-group align-items-center">
						<DetallesTrabajos ListArticulos="ListArticulos"
										  ArticuloId="DetalleSeleccionado.ArticuloId"
										  Cantidad="DetalleSeleccionado.Cantidad"
										  Precio="DetalleSeleccionado.Precio"
										  ArticuloSeleccionado=" AgregarDetalle" />
					</div>
				</div>

				<div>
					<table class="table table-light">
						<thead>
							<tr class="text-center">
								@*ArticuloId*@
								<th>ArticuloId</th>
								@*CantidadRequerida*@
								<th>Cantidad</th>
								@*Precio*@
								<th>Precio</th>
								@*Total*@
								<th>Total</th>

								<th>Remover</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in Trabajo.TrabajosDetalle)
							{
								<tr class="text-center">
									<th>@detalle.ArticuloId</th>
									<th>@detalle.Cantidad</th>
									<th>@detalle.Precio</th>
									<th>@(detalle.Precio * detalle.Cantidad)</th>
									<th>
										<button type="button" @onclick=" ()=> Eliminar(detalle)" class="btn btn-outline-danger bi bi-trash mt-2"> Remover</button>
									</th>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>

			<div class="card-footer">
				@if (!string.IsNullOrEmpty(CheckMessage))
				{
					<div class="alert alert-success bi bi-check2-circle ">@CheckMessage</div>

				}
				<a href="/Trabajos/IndexTrabajo"
				   class="btn btn-outline-secondary">
					<span class="bi bi-arrow-left mt-3"></span> Volver
				</a>	
				<button type="submit" class="btn btn-outline-success bi bi-pencil-square"> Modificar</button>
			</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int TrabajoId { get; set; }
	public Trabajos Trabajo { get; set; } = new Trabajos();
	public string ErrorMessage { get; set; }
	public string CheckMessage{ get; set; }
	public List<Clientes> ListaNombresC{ get; set; } = new List<Clientes>();
	public List<Tecnicos> ListaNombresT { get; set; } = new List<Tecnicos>();
	public List<Prioridades> ListaPrioridades { get; set; } = new List<Prioridades>();
	public List<Articulos> ListArticulos { get; set; } = [];
	public TrabajosDetalle DetalleSeleccionado { get; set; } = new TrabajosDetalle();


	protected override async Task OnInitializedAsync()
	{
		if (TrabajoId > 0)
		{
			Trabajo = await trabajoService.Buscar(TrabajoId);
		}
		ListaNombresC = await clienteService.Listar(nC => nC.ClienteId > 0);
		ListaNombresT = await tecnicoService.Listar(nT => nT.TecnicoId > 0);
		ListaPrioridades = await prioridadService.Listar(nP => nP.PrioridadId > 0);
		ListArticulos = await articuloService.Listar(a => true);
	}


	public async Task Modificar()
	{
		var trabajoOriginal = await trabajoService.Buscar(TrabajoId);

		if (Trabajo.DescripcionTrabajo != trabajoOriginal.DescripcionTrabajo && await trabajoService.ValidarTrabajo(Trabajo.DescripcionTrabajo))
		{
			ErrorMessage = "Trabajo registrado. Por favor, elija otro.";
		}
		else
		{
			await trabajoService.Guardar(Trabajo);
			CheckMessage = "El trabajo se ha modificado correctamente";
		}
	}

	public async Task AgregarDetalle((Articulos articulos, int cantidad) seleccion)
	{
		var ArticuloExiste = Trabajo.TrabajosDetalle
		.FirstOrDefault(a => a.ArticuloId == seleccion.articulos.ArticuloId);
		if (ArticuloExiste != null)
		{
			ArticuloExiste.Cantidad += seleccion.cantidad;
		}
		else
		{
			var Detalle = new TrabajosDetalle
				{
					ArticuloId = seleccion.articulos.ArticuloId,
					Cantidad = seleccion.cantidad,
					Precio = seleccion.articulos.Precio,
					Costo = seleccion.articulos.Costo
				};
			Trabajo.TrabajosDetalle.Add(Detalle);
			DetalleSeleccionado = new TrabajosDetalle();
			await Task.CompletedTask;
		}
	}

	public void Eliminar(TrabajosDetalle detalle)
	{
		Trabajo.TrabajosDetalle.Remove(detalle);
		DetalleSeleccionado.Cantidad = detalle.Cantidad;
		DetalleSeleccionado.ArticuloId = detalle.ArticuloId;
		DetalleSeleccionado.Precio = detalle.Precio;
	}

	private void LimpiarError()
	{
		ErrorMessage = string.Empty;
		LimpiarMensaje();
	}

	private void LimpiarMensaje()
	{
		CheckMessage = string.Empty;
	}
}