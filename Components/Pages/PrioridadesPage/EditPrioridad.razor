@page "/Prioridades/EditPrioridad/{PrioridadId:int}"
@rendermode InteractiveServer
@inject PrioridadService prioridadService
@inject NavigationManager navigation

<PageTitle>Editar prioridad</PageTitle>
<EditForm Model="Prioridad" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-primary text-white text-center">
				<h2 class="bi bi-pencil-square"><strong>Editar prioridad</strong></h2>
			</div>
			<div class="card-body">
            @*DescripcionPrioridad*@
            <label for="descripcionPrioridad" class="form-label"><strong>Descripci&oacute;n prioridad</strong></label>
            <InputText id="descripcionTrabajo" class="form-control" @bind-Value="Prioridad.DescripcionPrioridad" @onfocus = "LimpiarError"> </InputText>
            <ValidationMessage For="@(() => Prioridad.DescripcionPrioridad)"></ValidationMessage>
			@if (!string.IsNullOrEmpty(ErrorMessage))
			{
				<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

			}

			@*Tiempo*@
			<label for="id" class="form-label"> <strong>Tiempo</strong></label>
			<InputNumber id="id" class="form-control" @bind-Value="Prioridad.Tiempo" @onfocus="LimpiarMensaje"></InputNumber>
			<ValidationMessage For="@(() =>Prioridad.Tiempo)"></ValidationMessage>

			<div/>
			<div class="card-footer">
				@if (!string.IsNullOrEmpty(CheckMessage))
				{
					<div class="alert alert-success bi-check2-circle ">@CheckMessage</div>
				}
				@if (!string.IsNullOrEmpty(WarningMessage))
				{
					<div class="alert alert-warning bi-exclamation-triangle ">@WarningMessage</div>
				}
				<a href="/Prioridades/IndexPrioridad"
				   class="btn btn-outline-secondary">
					<span class="bi bi-arrow-left mt-3"></span> Volver
				</a>
				<button type="submit" class="btn btn-outline-success bi bi-pencil-square"> Modificar</button>
			</div>
		</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int PrioridadId { get; set; }
	public string ErrorMessage{ get; set; }
	public Prioridades Prioridad { get; set; } = new Prioridades();
	public string WarningMessage { get; set; }
	public string CheckMessage{ get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (PrioridadId > 0)
		{
			Prioridad = await prioridadService.Buscar(PrioridadId);
		}

	}

	public async Task Modificar()
	{
		var prioridadOriginal = await prioridadService.Buscar(PrioridadId);

		if (Prioridad.DescripcionPrioridad != prioridadOriginal.DescripcionPrioridad && await prioridadService.ValidarPrioridad(Prioridad.DescripcionPrioridad))
		{
			ErrorMessage = "La prioridad existe. Por favor, elija otra.";
		}
		else if(Prioridad.DescripcionPrioridad == prioridadOriginal.DescripcionPrioridad && Prioridad.Tiempo == prioridadOriginal.Tiempo)
		{
			WarningMessage = "No ha realizado ninguna modificación";
		}
		else
		{
			await prioridadService.Guardar(Prioridad);
			CheckMessage = "La prioridad se ha modificado correctamente";
		}
	}

	public void LimpiarMensaje()
	{
		CheckMessage = string.Empty;
		WarningMessage = string.Empty;
	}

	public void LimpiarError()
	{
		ErrorMessage = string.Empty;
		LimpiarMensaje();
	}
}