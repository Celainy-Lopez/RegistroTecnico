@page "/Prioridades/EditPrioridad/{PrioridadId:int}"
@rendermode InteractiveServer
@inject PrioridadService prioridadService
@inject NavigationManager navigation

<PageTitle>Editar prioridad</PageTitle>
<EditForm Model="Prioridad" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-danger text-white text-center">
				<h2 class="bi bi-pencil-square"><strong>Editar prioridad</strong></h2>
			</div>
			<div class="card-body">
            @*DescripcionPrioridad*@
            <label for="descripcionPrioridad" class="form-label"><strong>Descripci&oacute;n prioridad</strong></label>
            <InputText id="descripcionTrabajo" class="form-control" @bind-Value="Prioridad.DescripcionPrioridad"> </InputText>
            <ValidationMessage For="@(() => Prioridad.DescripcionPrioridad)"></ValidationMessage>
			@if (!string.IsNullOrEmpty(ErrorMessage))
			{
				<div class="alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>

			}

			@*Tiempo*@
			<label for="id" class="form-label"> <strong>Tiempo</strong></label>
			<InputNumber id="id" class="form-control" @bind-Value="Prioridad.Tiempo"></InputNumber>
			<ValidationMessage For="@(() =>Prioridad.Tiempo)"></ValidationMessage>

			<div/>
			<div class="card-footer">
				<button type="button" class="btn btn-secondary bi bi-box-arrow-in-left" @onclick="Volver"> </button>
				<button type="submit" class="btn btn-danger bi bi-pencil-square"> </button>
			</div>
		</div>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int PrioridadId { get; set; }
	public string ErrorMessage{ get; set; }
	public Prioridades Prioridad { get; set; } = new Prioridades();
	public bool Repetido { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (PrioridadId > 0)
		{
			Prioridad = await prioridadService.Buscar(PrioridadId);
		}

	}

	public async Task Modificar()
	{
		var prioridadOriginal = await prioridadService.Buscar(PrioridadId);

		if (Prioridad.DescripcionPrioridad != prioridadOriginal.DescripcionPrioridad && await prioridadService.ValidarPrioridad(Prioridad.DescripcionPrioridad))
		{
			ErrorMessage = "La prioridad existe. Por favor, elija otra.";
		}
		else
		{
			await prioridadService.Guardar(Prioridad);
			Prioridad = new Prioridades();
			Volver();
		}
	}

	public void Volver()
	{
		navigation.NavigateTo("/Prioridades/IndexPrioridad");
	}
}